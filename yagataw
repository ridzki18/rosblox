-- Auto Stage Teleporter — Loop-aware (reset ke 1 setelah finish/summit naik)
-- by you + chatgpt

-- ===== CONFIG =====
local START_STAGE = 1
local END_STAGE   = 8
local INTERVAL    = 2   -- detik
local OFFSET_Y    = 4
-- ===================

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local LP = Players.LocalPlayer

-- ===== GUI parent aman =====
local function getGuiParent()
    local ok, ui = pcall(function()
        if gethui then
            local h = gethui()
            if typeof(h) == "Instance" then return h end
        end
        return game:GetService("CoreGui")
    end)
    if ok and ui then return ui end
    return LP:WaitForChild("PlayerGui")
end

local function getHRP()
    local char = LP.Character or LP.CharacterAdded:Wait()
    return char:WaitForChild("HumanoidRootPart")
end

-- ===== helpers =====
local function ensurePart(inst)
    if not inst then return nil end
    if inst:IsA("BasePart") then return inst end
    if inst:IsA("Model") and inst.PrimaryPart then return inst.PrimaryPart end
    for _, d in ipairs(inst:GetDescendants()) do
        if d:IsA("BasePart") then return d end
    end
    return nil
end

local function tpToCheckpoint(num)
    local cfolder = workspace:FindFirstChild("Checkpoints")
    if not cfolder then return false end
    local node = cfolder:FindFirstChild(tostring(num), false)
    if not node then return false end
    local part = ensurePart(node)
    if not part then return false end
    local hrp = getHRP()
    pcall(function()
        hrp.CFrame = CFrame.new(part.Position + Vector3.new(0, OFFSET_Y, 0))
    end)
    return true
end

-- ===== Stage/Summit detection =====
local STAGE_KEYS  = { "stage", "checkpoint", "level" }
local SUMMIT_KEYS = { "summit" }

local function hasKey(name, keys)
    name = string.lower(tostring(name or ""))
    for _, k in ipairs(keys) do
        if string.find(name, k, 1, true) then return true end
    end
    return false
end

local function findNumberValue(keys)
    local function scan(root)
        if not root then return nil end
        for _, v in ipairs(root:GetDescendants()) do
            if (v:IsA("IntValue") or v:IsA("NumberValue")) and hasKey(v.Name, keys) then
                return v
            end
        end
        return nil
    end
    local ls = LP:FindFirstChild("leaderstats")
    if ls then
        local v = scan(ls)
        if v then return v end
    end
    return scan(LP)
end

local function getStageAndSummit()
    local stageObj  = findNumberValue(STAGE_KEYS)
    local summitObj = findNumberValue(SUMMIT_KEYS)
    local stage = nil
    local summit = nil
    if stageObj then pcall(function() stage = tonumber(stageObj.Value) end) end
    if summitObj then pcall(function() summit = tonumber(summitObj.Value) end) end
    return stage, summit
end

-- ===== UI =====
local parentGui = getGuiParent()

local gui = Instance.new("ScreenGui")
gui.Name = "CP_TP_LoopAware"
gui.ResetOnSpawn = false
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.Parent = parentGui

local frame = Instance.new("Frame")
frame.Size = UDim2.fromOffset(260, 140)
frame.Position = UDim2.new(0, 20, 0, 150)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
frame.Parent = gui
Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 10)
local stroke = Instance.new("UIStroke", frame)
stroke.Color = Color3.fromRGB(120, 120, 160)
stroke.Thickness = 1

local title = Instance.new("TextLabel")
title.BackgroundTransparency = 1
title.Size = UDim2.new(1, -90, 0, 28)
title.Position = UDim2.new(0, 10, 0, 6)
title.Font = Enum.Font.GothamBold
title.TextScaled = true
title.TextXAlignment = Enum.TextXAlignment.Left
title.Text = "Auto Stage TP (1-8)"
title.TextColor3 = Color3.fromRGB(235, 235, 245)
title.Parent = frame

task.spawn(function()
    local t = 0
    while gui.Parent do
        t += RunService.RenderStepped:Wait()
        title.TextColor3 = Color3.fromHSV((t*0.08)%1, 0.45, 1)
    end
end)

local minimize = Instance.new("TextButton")
minimize.Size = UDim2.fromOffset(26, 26)
minimize.Position = UDim2.new(1, -64, 0, 7)
minimize.Text = "—"
minimize.TextScaled = true
minimize.Font = Enum.Font.GothamSemibold
minimize.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
minimize.TextColor3 = Color3.fromRGB(230, 230, 240)
minimize.Parent = frame
Instance.new("UICorner", minimize).CornerRadius = UDim.new(0, 8)

local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.fromOffset(26, 26)
closeBtn.Position = UDim2.new(1, -32, 0, 7)
closeBtn.Text = "X"
closeBtn.TextScaled = true
closeBtn.Font = Enum.Font.GothamSemibold
closeBtn.BackgroundColor3 = Color3.fromRGB(55, 40, 40)
closeBtn.TextColor3 = Color3.fromRGB(255, 230, 230)
closeBtn.Parent = frame
Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0, 8)

local toggle = Instance.new("TextButton")
toggle.Size = UDim2.new(1, -20, 0, 50)
toggle.Position = UDim2.new(0, 10, 0, 60)
toggle.Font = Enum.Font.GothamBlack
toggle.TextScaled = true
toggle.Text = "Teleport OFF"
toggle.BackgroundColor3 = Color3.fromRGB(65, 30, 30)
toggle.TextColor3 = Color3.fromRGB(255, 235, 235)
toggle.Parent = frame
Instance.new("UICorner", toggle).CornerRadius = UDim.new(0, 10)

-- drag via title
do
    local dragging, p0, f0
    frame.InputBegan:Connect(function(i)
        local onTitle = (i.Position and (i.Position.Y - frame.AbsolutePosition.Y <= 40))
        if i.UserInputType == Enum.UserInputType.MouseButton1 and onTitle then
            dragging, p0, f0 = true, i.Position, frame.Position
            i.Changed:Connect(function()
                if i.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)
    frame.InputChanged:Connect(function(i)
        if dragging and i.UserInputType == Enum.UserInputType.MouseMovement then
            local d = i.Position - p0
            frame.Position = UDim2.new(f0.X.Scale, f0.X.Offset + d.X, f0.Y.Scale, f0.Y.Offset + d.Y)
        end
    end)
end

local minimized = false
minimize.MouseButton1Click:Connect(function()
    minimized = not minimized
    toggle.Visible = not minimized
    frame.Size = minimized and UDim2.fromOffset(260, 42) or UDim2.fromOffset(260, 140)
    minimize.Text = minimized and "+" or "—"
end)

closeBtn.MouseButton1Click:Connect(function()
    gui:Destroy()
end)

UIS.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if gui.Parent and input.KeyCode == Enum.KeyCode.RightShift then
        gui.Enabled = not gui.Enabled
    end
end)

-- ===== Logic: loop & reset awareness =====
local active = false
local lastSummit = nil

local function setToggleUI(on)
    if on then
        toggle.Text = "Teleport ON"
        toggle.BackgroundColor3 = Color3.fromRGB(40, 95, 55)
        toggle.TextColor3 = Color3.fromRGB(230, 255, 230)
    else
        toggle.Text = "Teleport OFF"
        toggle.BackgroundColor3 = Color3.fromRGB(65, 30, 30)
        toggle.TextColor3 = Color3.fromRGB(255, 235, 235)
    end
end

-- tunggu update stage (opsional)
local function waitStageAtLeast(target, timeout)
    local deadline = time() + (timeout or (INTERVAL + 1))
    while time() < deadline do
        local s = select(1, getStageAndSummit())
        if s and s >= target then return true end
        task.wait(0.1)
    end
    return false
end

local function loopAuto()
    -- init summit awal (kalau ada)
    local _, summit0 = getStageAndSummit()
    if summit0 then lastSummit = summit0 end

    while active and gui.Parent do
        local stage, summit = getStageAndSummit()

        -- kalau summit nambah, artinya baru selesai 1 putaran → start lagi dari 1
        if summit and lastSummit and summit > lastSummit then
            lastSummit = summit
            tpToCheckpoint(1)
            task.wait(INTERVAL)
            goto continue
        elseif summit and not lastSummit then
            lastSummit = summit
        end

        if stage then
            local nextStage
            -- habis finish (stage=0) atau di/melewati akhir → kembali ke 1
            if stage == 0 or stage >= END_STAGE then
                nextStage = 1
            else
                nextStage = stage + 1
            end
            tpToCheckpoint(nextStage)
            -- kalau nextStage > stage, tunggu server naikin stage biar sinkron
            if nextStage ~= 1 then
                waitStageAtLeast(nextStage, INTERVAL + 1)
            end
            task.wait(INTERVAL)
        else
            -- fallback: 1..END_STAGE
            for i = START_STAGE, END_STAGE do
                if not active or not gui.Parent then break end
                tpToCheckpoint(i)
                task.wait(INTERVAL)
            end
        end
        ::continue::
    end
end

toggle.MouseButton1Click:Connect(function()
    active = not active
    setToggleUI(active)
    if active then
        task.spawn(loopAuto)
    end
end)

LP.CharacterAdded:Connect(function()
    if active and gui.Parent then
        task.delay(1, function()
            if active and gui.Parent then task.spawn(loopAuto) end
        end)
    end
end)

print("[Auto Stage TP] Loop-aware ready. Interval:", INTERVAL, "s; range", START_STAGE, "→", END_STAGE)
